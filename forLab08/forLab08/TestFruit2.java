package forLab08;  // Name// Dateimport java.awt.*;import java.awt.event.*;import javax.swing.*;public class TestFruit2 extends JFrame {    // Buttons to simulate buying, eating, and trashing fruit, and    // also to see the count of fruit and to quit the application.    private JButton buyB, eatB, trashB, showCountB, quitB;    // Label for text field where user enters number of pieces of fruit bought.    private JLabel amountL;    // Text field where user enters number of pieces of fruit bought.    private JTextField howManyTF;    // Text area where messages to the user appear.    private JTextArea messageTA;    // Scroll pane that controls view of text area.    private JScrollPane messageSP;    private Container myCP; // handy reference to the content pane    private int numBought; // to hold the number the user indicates when buying	    //Fruit instance variable    private Fruit myFruit;	    //constructor     public TestFruit2 () {	super("The Banana Application");	setSize(400,225);	setLocation(100,100);	myCP = getContentPane();	myCP.setLayout (new FlowLayout());//using FlowLayout on this simple GUI		messageTA = new JTextArea("You have no bananas. You should buy some!\n"				  + "Enter an integer between 1 and 50 in the  \n"				  + "Amount of fruit text field and press the \n"				  + "Buy button to start.\n", 4,40);	messageSP = 	    new JScrollPane(messageTA,			    JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,			    JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);	messageSP.setPreferredSize(new Dimension(350,125));	myCP.add(messageSP); 			amountL = new JLabel("Amount of fruit:");	myCP.add(amountL);			howManyTF = new JTextField(4);	howManyTF.setText("");	myCP.add(howManyTF);			buyB = new JButton("Buy");	buyB.addActionListener(new BuyBHandler());	myCP.add(buyB);			eatB = new JButton("Eat");	eatB.addActionListener(new EatBHandler());	myCP.add(eatB);			trashB = new JButton("Trash All");	trashB.addActionListener(new TrashBHandler());	myCP.add(trashB);	showCountB = new JButton("Show Count");	showCountB.addActionListener(new ShowCountBHandler());	myCP.add(showCountB);			quitB = new JButton("Quit");	quitB.addActionListener(new QuitBHandler());	myCP.add(quitB);			setVisible(true);	addWindowListener(new WindowAdapter() {		public void windowClosing(WindowEvent e) {		    System.exit(0);		}//windowClosing	    }); //end of definition of WindowAdapter and semicolon to end the line 			// Construct a Fruit object with name "banana".	myFruit = new Fruit("banana");    }//TestFruit2 constructor	    class BuyBHandler implements ActionListener {	public void actionPerformed (ActionEvent e) {	    // The user can only buy between 1 and 50 pieces of fruit.	    if (validInput(1, 50) ) {		// The bananas object calls its bought method with argument		// numBought in order to update its instance variable myCount		// to reflect the current number of bananas.		myFruit.bought(numBought);		// An appropriate confirmation message is displayed. Note the use 		// of the getName instance method of class Fruit.		messageTA.setText("Okay, you bought " + numBought + " " +				  myFruit.getName() + (numBought ==1 ? "." : "s."));	    }// user's input was valid	}// actionPerformed			// Method validInput takes as parameters 	// 1) a minimum valid value for the int,	// 2) a maximum valid value for the int.	// Method validInput returns true if the parsed value	// lies in the range from min to max and false otherwise.			private boolean validInput (int min, int max) {	    // First get the text the user typed from the text field.	    String userInputS = howManyTF.getText();	    // Clear the text field after you have the input.	    howManyTF.setText("");				    if (!userInputS.equals("")) { //the user typed something in the text field		// Try to process the user's input.		try {		    // Echo the user's input so that the user can see what the computer got.		    messageTA.setText("You entered " + userInputS + "\n");		    // On the line below Integer.parseInt is passed the user's input.		    // Note that the int value returned is assigned to the instance variable		    // of class TestFruit2 named numBought.		    numBought = Integer.parseInt(userInputS);					    // Test to see if user input is between min and max		    if ((numBought >= min) && (numBought <= max)) {			return true;		    } else {			messageTA.append("Please try again. \n");			if (numBought < min) {			    messageTA.append(numBought +" is less than the minimum of " 					     + min + ".\n");			} else {			    messageTA.append(numBought +" is greater than the maximum of "					     + max + ".\n");			}// else for input too large		    }//else for input out of range		}//end of try block		catch (NumberFormatException nFE) {		    messageTA.append(userInputS +				     " is incorrect format for an integer. \nPlease try again!");		} //end of catch block		return false;	    } else { // the user typed nothing in the text field		messageTA.setText("You must type a value between 1 and 50\n"				  + "in the text field before pressing the Buy button.\n"				  + "Please try again.\n");		return false;	    }//else	}  //validinput    }//class BuyBHandler		    class ShowCountBHandler implements ActionListener {	public void actionPerformed (ActionEvent e) {	    // Note the use of the instance method toString of 	    // the Fruit class in order to display the count of fruit	    // and name of the fruit.	    messageTA.setText("You have " + myFruit.toString() + ".");	}// actionPerformed    }//class ShowCountBHandler	    class EatBHandler implements ActionListener {	public void actionPerformed (ActionEvent e) {	    if (myFruit.getCount() > 0) { // There is at least one piece of fruit.		// Replace the ??? in the line below with a call to 		// an instance method of the bananas object so that it		// updates its instance variable myCount to reflect that a		// banana has been eaten. Hint: Look in class BuyBhandler		// to see how buying bananas was coded.		myFruit.???;		// Insert an appropriate call to an access method 		// of the Fruit class to replace the ??? below		// so that the name of the fruit will be displayed.		// Hint: Look at class BuyBHandler.		messageTA.setText("Yum. What a tasty " + myFruit.??? + "!");		// Insert an appropriate call to an access 		// method of the Fruit class to replace the ??? below		//  so that the count of the fruit will be displayed.		// Hint: Look above in this method.		int currentCount = myFruit.???;		messageTA.append((currentCount>0) ? "You have " +currentCount + " left."				 :"None left!");	    } else { // There is no fruit to eat.		// Insert an appropriate call to an access method 		// of the Fruit class to replace the ??? below		// so that the name of the fruit will be displayed.		// Hint: Look at class BuyBHandler.		messageTA.setText("There are no " + myFruit.??? + "s to eat.\n" +				  "You must buy some before you can eat any.");	    }//inner else	}// actionPerformed    }//class EatBHandler	    class TrashBHandler implements ActionListener {	public void actionPerformed (ActionEvent e) {	    // Replace the ???  in the if statement's condition below with 	    // a call to an access method of the Fruit class that returns 	    // the value of the bananas object's instance variable myCount.	    // Hint: Look at the code in class EatBhandler.	    if (myFruit.??? > 0) { // There is at least one piece of fruit.		// Replace the ??? in the line below with a call to a 		// modifier method of the bananas object so that it 		// updates its instance variable myCount		// to reflect all the bananas have been thrown away.		myFruit.???;		// Insert an appropriate call to an access method of the 		// Fruit class to replace the ??? below		// so that the name of the fruit will be displayed.		// Hint: Look at class BuyBHandler.		messageTA.setText("All of those smelly " + myFruit.??? +				  "s have been thrown away!\n" +				  "You must buy more bananas before you can eat any.");	    } else { // There is no fruit to throw away.		// Insert an appropriate call to an access method of 		// the Fruit class to replace the ??? below		// so that the name of the fruit will be displayed.		// Hint: Look at class BuyBHandler.		messageTA.setText("There are no " + myFruit.??? + "s to throw away.\n" +				  "Maybe you ate all of them!");	    }// else	}// actionPerformed    }//class TrashBHandler	    class QuitBHandler implements ActionListener {	public void actionPerformed (ActionEvent e) {	    System.exit(0);	}// actionPerformed    }//class QuitBHandler		    public static void main (String args[]) {	TestFruit2 myApp = new TestFruit2();    }//main method}//TestFruit2						